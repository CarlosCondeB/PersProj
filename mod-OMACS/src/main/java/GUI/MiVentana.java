
package GUI;

import Elementos.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Vector;
import java.util.logging.*;
import javax.swing.*;

public class MiVentana extends javax.swing.JFrame {
    private String name="", value="";
    private int x=0, conf, i, cont;
    private Point p1, p2;
    private Elemento mov;
    private File archivo;
    
    private Vector<Elemento> vtrElemento;
    private Vector<Arcos> vtrArco, vtrDel;
    
    public MiVentana() {
        initComponents();
        //Instanciamos los vectores.
        vtrElemento = new Vector<>();
        vtrArco = new Vector<>();
        vtrDel = new Vector<>();
    }

    @Override
    public void paint(Graphics g){//MÃ©todo para pintar los elementos sobre el lienzo.
        super.paint(g);
        
        for(Arcos arc : vtrArco){//Recorremos el vector de relaciones.
            arc.DibRelacion(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
        }
        
        for(Elemento ele : vtrElemento){//Recorremos el vector de nodos.
            ele.DibFigura(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablero = new javax.swing.JPanel();
        BarraH = new javax.swing.JToolBar();
        tbb1 = new javax.swing.JButton();
        tbb2 = new javax.swing.JButton();
        tbb3 = new javax.swing.JButton();
        tbb4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        tbtRel = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        tbtMov = new javax.swing.JToggleButton();
        tbtMod = new javax.swing.JToggleButton();
        tbtDel = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        opNew = new javax.swing.JMenuItem();
        opOpen = new javax.swing.JMenuItem();
        opSave = new javax.swing.JMenuItem();
        opClose = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OMACS Modificado");
        setResizable(false);

        tablero.setBackground(new java.awt.Color(255, 255, 255));
        tablero.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tableroMouseDragged(evt);
            }
        });
        tablero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableroMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableroMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableroMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout tableroLayout = new javax.swing.GroupLayout(tablero);
        tablero.setLayout(tableroLayout);
        tableroLayout.setHorizontalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 995, Short.MAX_VALUE)
        );
        tableroLayout.setVerticalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        BarraH.setOrientation(javax.swing.SwingConstants.VERTICAL);
        BarraH.setRollover(true);

        tbb1.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Tri.png")); // NOI18N
        tbb1.setToolTipText("Agregar Agent");
        tbb1.setFocusable(false);
        tbb1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbb1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbb1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbb1ActionPerformed(evt);
            }
        });
        BarraH.add(tbb1);

        tbb2.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Pen.png")); // NOI18N
        tbb2.setToolTipText("Agregar Cabability");
        tbb2.setFocusable(false);
        tbb2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbb2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbb2ActionPerformed(evt);
            }
        });
        BarraH.add(tbb2);

        tbb3.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Cir.png")); // NOI18N
        tbb3.setToolTipText("Agregar Rol");
        tbb3.setFocusable(false);
        tbb3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbb3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbb3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbb3ActionPerformed(evt);
            }
        });
        BarraH.add(tbb3);

        tbb4.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Cua.png")); // NOI18N
        tbb4.setToolTipText("Agregar Goal");
        tbb4.setFocusable(false);
        tbb4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbb4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbb4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbb4ActionPerformed(evt);
            }
        });
        BarraH.add(tbb4);
        BarraH.add(jSeparator1);

        tbtRel.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Arr.png")); // NOI18N
        tbtRel.setToolTipText("Agregar Relacion");
        tbtRel.setFocusable(false);
        tbtRel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtRel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtRel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtRelActionPerformed(evt);
            }
        });
        BarraH.add(tbtRel);
        BarraH.add(jSeparator2);

        tbtMov.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Mov.png")); // NOI18N
        tbtMov.setToolTipText("Mover Elemento");
        tbtMov.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbtMov.setFocusable(false);
        tbtMov.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtMov.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtMov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtMovActionPerformed(evt);
            }
        });
        BarraH.add(tbtMov);

        tbtMod.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Mod.png")); // NOI18N
        tbtMod.setToolTipText("Modificar Propiedades de los Elementos");
        tbtMod.setFocusable(false);
        tbtMod.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtMod.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtModActionPerformed(evt);
            }
        });
        BarraH.add(tbtMod);

        tbtDel.setIcon(new javax.swing.ImageIcon("C:\\Users\\carli\\Documents\\NetBeansProjects\\POO\\OMACS_Modificado\\src\\main\\java\\Imgs\\Del.png")); // NOI18N
        tbtDel.setToolTipText("Borrar Elemento");
        tbtDel.setFocusable(false);
        tbtDel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tbtDel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        tbtDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtDelActionPerformed(evt);
            }
        });
        BarraH.add(tbtDel);

        jMenu1.setText("Opciones");

        opNew.setText("Nuevo Modelo");
        opNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opNewActionPerformed(evt);
            }
        });
        jMenu1.add(opNew);

        opOpen.setText("Abrir Modelo");
        opOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opOpenActionPerformed(evt);
            }
        });
        jMenu1.add(opOpen);

        opSave.setText("Guardar Modelo");
        opSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSaveActionPerformed(evt);
            }
        });
        jMenu1.add(opSave);

        opClose.setText("Cerrar Aplicacion");
        opClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opCloseActionPerformed(evt);
            }
        });
        jMenu1.add(opClose);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(BarraH, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(BarraH, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void opNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opNewActionPerformed
        //Eliminamos todos los elementos. (Borramos todo lo que hay en el lienzo)
        this.vtrArco.removeAllElements();
        this.vtrElemento.removeAllElements();
        repaint();
    }//GEN-LAST:event_opNewActionPerformed

    private void opCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opCloseActionPerformed
        //Terminamos la ejecuciÃ³n del sistema.
        System.exit(0);
    }//GEN-LAST:event_opCloseActionPerformed

    private void tbb1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbb1ActionPerformed
        //CREACION DE AGENT.
        x=0;
        name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Agent", 3); //Solicitamos ID.
        if(name!=null){//ConfirmaciÃ³n de creaciÃ³n.
            while (x==0 && this.vtrElemento.size()>0){ //Recorremos el vector por cada nuevo nombre ingresado.
                for (Elemento ele : vtrElemento) {//Recorremos el vector de nodos.
                    if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                        x = 1;
                    } else {//Coincidencia encontrada
                        JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                        name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Agent", 3);//Solicitamos ID.
                        x = 0;
                        if(name==null){//Validamos creaciÃ³n.
                            break;
                        }
                    }
                }
                if(name==null){//Validamos creaciÃ³n.
                    break;
                }
            }
            if(name!=null){//ConfirmaciÃ³n de creaciÃ³n.
                value = JOptionPane.showInputDialog(tablero, "Ingrese valor: ", "Agent", 3);//Solicitamos valor.
                if (value == null) {//Validamos dato ingresado.
                    value = "0";
                }
                try {//Validamos tipo de dato ingresado.
                    while (!(Integer.parseInt(value) >= 0)) {//Validamos nÃºmero positivo.
                        JOptionPane.showMessageDialog(tablero, "Valor no vÃ¡lido.", "Error", 0);//Mostramos mensaje en caso de nÃºmero negativo.
                        value = JOptionPane.showInputDialog(tablero, "Ingrese valor: ", "Agent", 3);//Solicitamos valor.
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(tablero, "Valor no admitido.", "Error", 0);//Mostramos mensaje en caso de dato errÃ³neo.
                    value = "0.0";
                }
                //Creamos el elemento y anexamos al vector.
                this.vtrElemento.add(new Agents(Math.abs((int) (tablero.getWidth() * Math.random())), Math.abs((int) (tablero.getHeight() * Math.random())), name, value));
                repaint();//Pintamos elemento.
            }
        }
    }//GEN-LAST:event_tbb1ActionPerformed

    private void tbb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbb2ActionPerformed
        //CREACION DE CABABILITY.
        x=0;
        name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Cabability", 3);//Solicitamos ID.
        if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
            while (x == 0 && this.vtrElemento.size()>0) {//Recorremos el vector por cada nuevo nombre ingresado.
                for (Elemento ele : vtrElemento) {//Recorremos el vector de nodos.
                    if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                        x = 1;
                    } else {//Coincidencia encontrada
                        JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                        name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Cabability", 3);//Solicitamos ID.
                        x = 0;
                        if (name == null) {//Validamos creaciÃ³n.
                            break;
                        }
                    }
                }
                if (name == null) {//Validamos creaciÃ³n.
                    break;
                }
            }
            if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
                //Creamos el elemento y anexamos al vector.
                this.vtrElemento.add(new Cababilities(Math.abs((int) (tablero.getWidth() * Math.random())), Math.abs((int) (tablero.getHeight() * Math.random())), name, " "));
                repaint();//Pintamos elemento.
            }
        }
    }//GEN-LAST:event_tbb2ActionPerformed

    private void tbb3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbb3ActionPerformed
        //CREACION DE ROL.
        x=0;
        name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Rol", 3);//Solicitamos ID.
        if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
            while (x == 0 && this.vtrElemento.size()>0) {//Recorremos el vector por cada nuevo nombre ingresado.
                for (Elemento ele : vtrElemento) {//Recorremos el vector de nodos.
                    if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                        x = 1;
                    } else {//Coincidencia encontrada
                        JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                        name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Rol", 3);//Solicitamos ID.
                        x = 0;
                        if (name == null) {//Validamos creaciÃ³n.
                            break;
                        }
                    }
                }
                if (name == null) {//Validamos creaciÃ³n.
                    break;
                }
            }
            if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
                //Creamos el elemento y anexamos al vector.
                this.vtrElemento.add(new Roles(Math.abs((int) (tablero.getWidth() * Math.random())), Math.abs((int) (tablero.getHeight() * Math.random())), name, " "));
                repaint();//Pintamos elemento.
            }
        }
    }//GEN-LAST:event_tbb3ActionPerformed

    private void tbb4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbb4ActionPerformed
        //CREACION DE GOAL.
        x=0;
        name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Goal", 3);//Solicitamos ID.
        if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
            while (x == 0 && this.vtrElemento.size()>0) {//Recorremos el vector por cada nuevo nombre ingresado.
                for (Elemento ele : vtrElemento) {//Recorremos el vector de nodos.
                    if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                        x = 1;
                    } else {//Coincidencia encontrada
                        JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                        name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Goal", 3);//Solicitamos ID.
                        x = 0;
                        if (name == null) {//Validamos creaciÃ³n.
                            break;
                        }
                    }
                }
                if (name == null) {//Validamos creaciÃ³n.
                    break;
                }
            }
            if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
                //Creamos el elemento y anexamos al vector.
                this.vtrElemento.add(new Goals(Math.abs((int) (tablero.getWidth() * Math.random())), Math.abs((int) (tablero.getHeight() * Math.random())), name, " "));
                repaint();//Pintamos elemento.
            }
        }
    }//GEN-LAST:event_tbb4ActionPerformed

    private void tbtRelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtRelActionPerformed
        if (tbtRel.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbb1.setEnabled(false);
            tbb2.setEnabled(false);
            tbb3.setEnabled(false);
            tbb4.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtMod.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbb1.setEnabled(true);
            tbb2.setEnabled(true);
            tbb3.setEnabled(true);
            tbb4.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtMod.setEnabled(true);
        }
    }//GEN-LAST:event_tbtRelActionPerformed

    private void tableroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseClicked
        if(tbtRel.isSelected()){//Validamos botÃ³n.
            //CREACIÃN DE RELACIONES.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                for(Elemento ele : vtrElemento){//Recorremos vector de Elementos.
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){
                        if(p1 == null){//Validamos primer click.
                            if(ele instanceof Agents){//Validamos tipo de elemento sobre el que se hizo click.
                                p1 = new Point(ele.getX(), ele.getY());//Almacenamos coordenadas de clickeado.
                                conf = 1;
                            }
                            else if(ele instanceof Roles){//Validamos tipo de elemento sobre el que se hizo click.
                                p1 = new Point(ele.getX(), ele.getY());//Almacenamos pocisiÃ³n de clickeado.
                                conf = 2;
                            }
                        }
                        else
                        {
                            if(conf==1 && ele instanceof Cababilities){//Validamos tipo de elemento sobre el que se hace segundo click.
                                p2 = new Point(ele.getX(),ele.getY());//Almacenamos coordenadas de segundo clickeado.
                                name = JOptionPane.showInputDialog(tablero, "Valor (0.0 - 1.0): ", "Posseses", 3);//Solicitamos valor.
                                while(x!=0 && name!=null){//Validamos dato ingresado.
                                    x=1;
                                    try {//Validamos tipo de dato ingresado.
                                        if(!(Float.parseFloat(name)>=0.0 && Float.parseFloat(name) <= 1.0)) {//Verificar valor dentro del rango.
                                            JOptionPane.showMessageDialog(tablero, "Valor incorrecto.", "Error", 0);//Mostrar mensaje.
                                            name = JOptionPane.showInputDialog(tablero, "Valor: ", "Possesses", 3);//Solicitar valor.
                                            if (name == null){
                                                x=0;
                                            }
                                        }else{
                                            x=0;
                                        }
                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(tablero, "Dato incorrecto.", "Error", 0);//Mostrar mensaje.
                                        name = JOptionPane.showInputDialog(tablero, "Valor: ", "Possesses", 3);//Solicitar valor.
                                        if (name == null){
                                            x=0;
                                        }
                                    }
                                }
                                if (name != null) {
                                    this.vtrArco.add(new Arcos(1, p1.x, p1.y, p2.x, p2.y, name));//Creamos relaciÃ³n y anexamos al vector.
                                    repaint();//Pintamos.
                                }
                            }
                            else if(conf==2 && ele instanceof Cababilities){//Validamos tipo de elemento sobre el que se hace segundo click.
                                p2 = new Point(ele.getX(),ele.getY());//Almacenamos coordenadas de segundo clickeado.
                                this.vtrArco.add(new Arcos(2, p1.x, p1.y, p2.x, p2.y," "));//Creamos relaciÃ³n y anexamos al vector.
                                repaint();//Pintamos.
                            }
                            else if(conf==2 && ele instanceof Goals){//Validamos tipo de elemento sobre el que se hace segundo click.
                                p2 = new Point(ele.getX(),ele.getY());//Almacenamos coordenadas de segundo clickeado.
                                this.vtrArco.add(new Arcos(3, p1.x, p1.y, p2.x, p2.y," "));//Creamos relaciÃ³n y anexamos al vector.
                                repaint();//Pintamos.
                            }
                            else{
                                JOptionPane.showMessageDialog(tablero, "RelaciÃ³n no vÃ¡lida.", "Error", 0);//Mostamos mensaje.
                            }
                            //Reiniciamos las variables.
                            p1 = null;
                            p2 = null;
                            conf=0;
                        }
                    }
                }
            }
        }
        else if(tbtDel.isSelected()){//Validamos botÃ³n.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                for(Elemento ele : vtrElemento){//Recorremos vector de Elementos.
                    if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrElemento.remove(ele);//Eliminamos elemento del vector.
                        break;
                    }
                }
                for (Arcos arc : vtrArco) {//Recorremos vector de Relaciones.
                    if (new Rectangle(arc.getX1() - 75 / 2, arc.getY1() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrDel.add(arc);//Anexamos relaciÃ³n al vector.
                    } else if (new Rectangle(arc.getX2() - 75 / 2, arc.getY2() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrDel.add(arc);//Anexamos relaciÃ³n al vector.
                    }
                }
                for (Arcos arcos : vtrDel) {//Recorremos vector de Relaciones.
                    this.vtrArco.remove(arcos);//Eliminamos relaciones coincidentes del vector.
                }
                repaint();//Pintamos
                this.vtrDel.removeAllElements();//Eliminamos todos los elementos almacenados.
            }
        }
        else if(tbtMod.isSelected()){//Validamos botÃ³n.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                for(Elemento ele : vtrElemento){//Recorremos vector de Elementos.
                    if(new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())){//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        if(ele instanceof Agents){//Verificamos tipo de elemento.
                            value = JOptionPane.showInputDialog(tablero, "Nuevo valor: ", "Agent", 3);//Solicitamos nuevo valor.
                            if (value == null) {//Validamos nuevo valor.
                                break;
                            }
                            try {//Validamos tipo de dato.
                                while (!(Integer.parseInt(value) >= 0)) {
                                    JOptionPane.showMessageDialog(tablero, "Valor no vÃ¡lido.", "Error", 0);//Mostrar mensaje.
                                    value = JOptionPane.showInputDialog(tablero, "Ingrese valor: ", "Agent", 3);//Solicitar nuevo valor.
                                }
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(tablero, "Valor no admitido.", "Error", 0);//Mensaje tipo de dato incorrecto.
                                value = "0.0";
                            }
                            ele.setValue(value);//Actualizamos valor de elemento.
                        }
                    }
                }
                repaint();//Pintamos.
            }
        }
    }//GEN-LAST:event_tableroMouseClicked

    private void tbtMovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtMovActionPerformed
        if (tbtMov.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbb1.setEnabled(false);
            tbb2.setEnabled(false);
            tbb3.setEnabled(false);
            tbb4.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtDel.setEnabled(false);
            tbtMod.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbb1.setEnabled(true);
            tbb2.setEnabled(true);
            tbb3.setEnabled(true);
            tbb4.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtMod.setEnabled(true);
        }
    }//GEN-LAST:event_tbtMovActionPerformed

    private void tbtDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtDelActionPerformed
        if (tbtDel.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbb1.setEnabled(false);
            tbb2.setEnabled(false);
            tbb3.setEnabled(false);
            tbb4.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtMod.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbb1.setEnabled(true);
            tbb2.setEnabled(true);
            tbb3.setEnabled(true);
            tbb4.setEnabled(true);
            tbtMov.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtMod.setEnabled(true);
        }
    }//GEN-LAST:event_tbtDelActionPerformed

    private void tbtModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtModActionPerformed
        if (tbtMod.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            tbb1.setEnabled(false);
            tbb2.setEnabled(false);
            tbb3.setEnabled(false);
            tbb4.setEnabled(false);
            tbtMov.setEnabled(false);
            tbtRel.setEnabled(false);
            tbtDel.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            tbb1.setEnabled(true);
            tbb2.setEnabled(true);
            tbb3.setEnabled(true);
            tbb4.setEnabled(true);
            tbtDel.setEnabled(true);
            tbtRel.setEnabled(true);
            tbtMov.setEnabled(true);
        }
    }//GEN-LAST:event_tbtModActionPerformed

    private void tableroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMousePressed
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            i = 0;
            for (Elemento ele : vtrElemento) {//Recorremos vector de Elementos.
                if (new Rectangle(ele.getX()-75/2, ele.getY()-75/2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    mov = ele;//Almacenamos elemento.
                    cont = i;//Almacenamos posiciÃ³n de elemento.
                    
                    //Validamos tipo de elemento.
                    if (ele instanceof Agents) {
                        conf = 1;
                    } else if (ele instanceof Cababilities) {
                        conf = 2;
                    } else if (ele instanceof Roles) {
                        conf = 3;
                    } else if (ele instanceof Goals) {
                        conf = 4;
                    }
                    break;
                }
                i++;
            }
        }
    }//GEN-LAST:event_tableroMousePressed

    private void tableroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseReleased
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS. Reiniciamos Variables.
            mov = null;
            cont = -1;
        }
    }//GEN-LAST:event_tableroMouseReleased

    private void tableroMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseDragged
        if(tbtMov.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            if (mov != null) {//Validamos que se haya seleccionado un elemento.
                switch (conf) {//Actualizamos coordenadas de los elementos.
                    case 1:
                        this.vtrElemento.set(cont, new Agents(evt.getX(), evt.getY(), mov.getName(), mov.getValue()));
                        break;
                    case 2:
                        this.vtrElemento.set(cont, new Cababilities(evt.getX(), evt.getY(), mov.getName(), mov.getValue()));
                        break;
                    case 3:
                        this.vtrElemento.set(cont, new Roles(evt.getX(), evt.getY(), mov.getName(), mov.getValue()));
                        break;
                    case 4:
                        this.vtrElemento.set(cont, new Goals(evt.getX(), evt.getY(), mov.getName(), mov.getValue()));
                        break;
                    default:
                        break;
                }
                i = 0;
                for (Arcos arc : vtrArco) {//Recorremos vector de Relaciones.
                    if (new Rectangle(arc.getX1() - 75 / 2, arc.getY1() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrArco.set(i, new Arcos(arc.getN(), evt.getX(), evt.getY(), arc.getX2(), arc.getY2(), arc.getValue()));//Actualizamos las coordenadas del nuevo extremo de las relaciones.
                    } else if (new Rectangle(arc.getX2() - 75 / 2, arc.getY2() - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrArco.set(i, new Arcos(arc.getN(), arc.getX1(), arc.getY1(), evt.getX(), evt.getY(), arc.getValue()));//Actualizamos las coordenadas del nuevo extremo de las relaciones.
                    }
                    i++;
                }
                repaint();//Pintamos.
            }
        }
    }//GEN-LAST:event_tableroMouseDragged

    private void opSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSaveActionPerformed
        //GUARDAR MODELO.
        JFileChooser SvdFile = new JFileChooser();//Instanciamos nueva variable.
        SvdFile.setApproveButtonText("Guardar");//Modificamos label de boton.
        SvdFile.showSaveDialog(null);//Indicamos acciÃ³n.
        File file = new File(SvdFile.getSelectedFile()+".txt");//Instanciamos nueva variable y le pasamos el archivo creado.
        
        try {//Abrimos el archivo para escribir sobre Ã©l.
            BufferedWriter Esc = new BufferedWriter(new FileWriter(file));//Instanciamos variable para manejar la informaciÃ³n ingresada.
            Esc.write("ELEMENTOS");
            Esc.write("\r\n");
            for (Elemento ele : vtrElemento) {//Recorremos vector elementos y aÃ±adimos cada propiedad separada por ";".
                if (ele instanceof Agents) {
                    Esc.write(1 + ";" + ele.getX() + ";" + ele.getY() + ";" + ele.getName() + ";" + ele.getValue());
                    Esc.write("\r\n");//Nueva linea.
                } else if (ele instanceof Cababilities) {
                    Esc.write(2 + ";" + ele.getX() + ";" + ele.getY() + ";" + ele.getName() + ";" + ele.getValue());
                    Esc.write("\r\n");//Nueva linea.
                } else if (ele instanceof Roles) {
                    Esc.write(3 + ";" + ele.getX() + ";" + ele.getY() + ";" + ele.getName() + ";" + ele.getValue());
                    Esc.write("\r\n");//Nueva linea.
                } else if (ele instanceof Goals) {
                    Esc.write(4 + ";" + ele.getX() + ";" + ele.getY() + ";" + ele.getName() + ";" + ele.getValue());
                    Esc.write("\r\n");//Nueva linea.
                }
            }
            Esc.write("*");
            Esc.write("\r\n");
            Esc.write("RELACIONES");
            Esc.write("\r\n");
            for (Arcos arc : vtrArco) {//Recorremos vector Relaciones y aÃ±adimos cada propiedad separada por ";".
                Esc.write(arc.getN() + ";" + arc.getX1() + ";" + arc.getY1() + ";" + arc.getX2() + ";" + arc.getY2() + ";" + arc.getValue());
                Esc.write("\r\n");
            }
            Esc.close();//Cerramos archivo.
            JOptionPane.showMessageDialog(tablero, "Archivo guardado con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(tablero, "No se pudo guardar el archivo.", "Error", 0);//Mostramos mensaje.
        }
    }//GEN-LAST:event_opSaveActionPerformed

    private void opOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opOpenActionPerformed
        //ABRIR MODELO.
        x=0;
        JFileChooser OpndFile = new JFileChooser();//Instanciamos nueva variable.
        OpndFile.showOpenDialog(null);//Indicamos acciÃ³n.
        BufferedReader br;//Espacio de memoria para manejar la informaciÃ³n del archiovo.
        try {
            br = new BufferedReader(new FileReader(OpndFile.getSelectedFile())); //Instanciamos variable para manejar la informaciÃ³n extraida.
            //Limpiamos los vectores.
            this.vtrArco.removeAllElements();
            this.vtrElemento.removeAllElements();
            String line; //VARIABLE PARA MANIPULAR CADA LINEA DEL ARCHIVO
            //LEER EL ARCHIVO HASTA QUE NO HAYAN MÃS LINEAS
            while ((line = br.readLine()) != null) {
                //RECORTAR LA INFORMACIÃN
                String[] str = line.split(";"); //"; discriminador"
                //MANIPULAR DATOS
                if(str[0].compareTo("RELACIONES")==0){//Verificamos secciÃ³n del archivo.
                    x=1;
                }
                
                if(x==0){//Nodos
                    switch (str[0]) {//Determinamos tipo de nodo almacenado en cada linea y se aÃ±ade al vector.
                        case "1":
                            this.vtrElemento.add(new Agents(Integer.parseInt(str[1]),Integer.parseInt(str[2]),str[3],str[4]));
                            break;
                        case "2":
                            this.vtrElemento.add(new Cababilities(Integer.parseInt(str[1]),Integer.parseInt(str[2]),str[3],str[4]));
                            break;
                        case "3":
                            this.vtrElemento.add(new Roles(Integer.parseInt(str[1]),Integer.parseInt(str[2]),str[3],str[4]));
                            break;
                        case "4":
                            this.vtrElemento.add(new Goals(Integer.parseInt(str[1]),Integer.parseInt(str[2]),str[3],str[4]));
                            break;
                        default:
                            break;
                    }
                }else{//Relaciones.
                    switch (str[0]) {//Determinamos tipo de relaciÃ³n almacenada en cada linea y se aÃ±ade al vector.
                        case "1":
                            this.vtrArco.add(new Arcos(Integer.parseInt(str[0]),Integer.parseInt(str[1]),Integer.parseInt(str[2]),Integer.parseInt(str[3]),Integer.parseInt(str[4]),str[5]));
                            break;
                        case "2":
                            this.vtrArco.add(new Arcos(Integer.parseInt(str[0]),Integer.parseInt(str[1]),Integer.parseInt(str[2]),Integer.parseInt(str[3]),Integer.parseInt(str[4]),str[5]));
                            break;
                        case "3":
                            this.vtrArco.add(new Arcos(Integer.parseInt(str[0]),Integer.parseInt(str[1]),Integer.parseInt(str[2]),Integer.parseInt(str[3]),Integer.parseInt(str[4]),str[5]));
                            break;
                        default:
                            break;
                    }
                }
            }
            repaint();//Pintamos.
            br.close();//Cerramos archivo.
            JOptionPane.showMessageDialog(tablero, "Archivo abierto con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MiVentana.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(tablero, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(tablero, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        }
    }//GEN-LAST:event_opOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiVentana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiVentana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraH;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JMenuItem opClose;
    private javax.swing.JMenuItem opNew;
    private javax.swing.JMenuItem opOpen;
    private javax.swing.JMenuItem opSave;
    private javax.swing.JPanel tablero;
    private javax.swing.JButton tbb1;
    private javax.swing.JButton tbb2;
    private javax.swing.JButton tbb3;
    private javax.swing.JButton tbb4;
    private javax.swing.JToggleButton tbtDel;
    private javax.swing.JToggleButton tbtMod;
    private javax.swing.JToggleButton tbtMov;
    private javax.swing.JToggleButton tbtRel;
    // End of variables declaration//GEN-END:variables
}
