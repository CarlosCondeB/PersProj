
package GUI;

import Fulker.Ford_Fulkerson;
import elements.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Line2D;
import java.io.*;
import java.util.ArrayList;
import java.util.logging.*;
import javax.swing.*;

public class MiVentana extends javax.swing.JFrame {
    private String name="";
    private int band = 0, cont, band2=0;
    private Boolean conf;
    private Point p1, p2;
    private Node mov, nodoOrigen;
    
    private ArrayList<Node> vtrNode, vtrAuxNode;
    private ArrayList<Arco> vtrArco, vtrDel, vtrAuxArco;
    private ArrayList<String> vtrBottleNeck;
    
    public MiVentana() {
        initComponents();
        //Instanciamos los vectores.
        vtrNode = new ArrayList<>();
        vtrArco = new ArrayList<>();
        vtrDel = new ArrayList<>();
        vtrAuxNode = new ArrayList<>();
        vtrAuxArco = new ArrayList<>();
        vtrBottleNeck = new ArrayList<>();
        this.btnAd.setEnabled(false);
    }

    @Override
    public void paint(Graphics g){//MÃ©todo para pintar los elementos sobre el lienzo.
        super.paint(g);
        
        for(Arco arc : vtrArco){//Recorremos el vector de relaciones.
            arc.DibRelacion(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
        }
        
        for(Node ele : vtrNode){//Recorremos el vector de nodos.
            ele.DibFigura(tablero.getGraphics());//Dibujamos elemento sobre el lienzo.
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        jSeparator10 = new javax.swing.JSeparator();
        tablero = new javax.swing.JPanel();
        textArea = new java.awt.TextArea();
        BarraH = new javax.swing.JToolBar();
        btnAtras = new javax.swing.JButton();
        btnAd = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        btnNodo = new javax.swing.JToggleButton();
        btnRelacion = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnMover = new javax.swing.JToggleButton();
        btnModificar = new javax.swing.JToggleButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        btnDelete = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        opNew = new javax.swing.JMenuItem();
        opOpen = new javax.swing.JMenuItem();
        opSave = new javax.swing.JMenuItem();
        opClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        toolsFulkerson = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OMACS Modificado");
        setResizable(false);

        tablero.setBackground(new java.awt.Color(255, 255, 255));
        tablero.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tableroMouseDragged(evt);
            }
        });
        tablero.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableroMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableroMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableroMouseReleased(evt);
            }
        });

        textArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textArea.setEditable(false);
        textArea.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        javax.swing.GroupLayout tableroLayout = new javax.swing.GroupLayout(tablero);
        tablero.setLayout(tableroLayout);
        tableroLayout.setHorizontalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableroLayout.createSequentialGroup()
                .addGap(0, 805, Short.MAX_VALUE)
                .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        tableroLayout.setVerticalGroup(
            tableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tableroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(textArea, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        BarraH.setOrientation(javax.swing.SwingConstants.VERTICAL);
        BarraH.setRollover(true);

        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/atras.png"))); // NOI18N
        btnAtras.setFocusable(false);
        btnAtras.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAtras.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });
        BarraH.add(btnAtras);

        btnAd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/ad.png"))); // NOI18N
        btnAd.setFocusable(false);
        btnAd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BarraH.add(btnAd);
        BarraH.add(jSeparator11);

        btnNodo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Cir.png"))); // NOI18N
        btnNodo.setToolTipText("Agregar Nodo");
        btnNodo.setFocusable(false);
        btnNodo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnNodo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNodoActionPerformed(evt);
            }
        });
        BarraH.add(btnNodo);

        btnRelacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Arr.png"))); // NOI18N
        btnRelacion.setToolTipText("Agregar Relacion");
        btnRelacion.setFocusable(false);
        btnRelacion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRelacion.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRelacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelacionActionPerformed(evt);
            }
        });
        BarraH.add(btnRelacion);
        BarraH.add(jSeparator3);

        btnMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Mov.png"))); // NOI18N
        btnMover.setToolTipText("Mover Elemento");
        btnMover.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnMover.setFocusable(false);
        btnMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoverActionPerformed(evt);
            }
        });
        BarraH.add(btnMover);

        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Mod.png"))); // NOI18N
        btnModificar.setFocusable(false);
        btnModificar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnModificar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        BarraH.add(btnModificar);
        BarraH.add(jSeparator12);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Del.png"))); // NOI18N
        btnDelete.setToolTipText("Borrar Elemento");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        BarraH.add(btnDelete);

        jMenu1.setText("Opciones");

        opNew.setText("Nuevo Modelo");
        opNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opNewActionPerformed(evt);
            }
        });
        jMenu1.add(opNew);

        opOpen.setText("Abrir Modelo");
        opOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opOpenActionPerformed(evt);
            }
        });
        jMenu1.add(opOpen);

        opSave.setText("Guardar Modelo");
        opSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opSaveActionPerformed(evt);
            }
        });
        jMenu1.add(opSave);

        opClose.setText("Cerrar Aplicacion");
        opClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opCloseActionPerformed(evt);
            }
        });
        jMenu1.add(opClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        toolsFulkerson.setText("Ford-Fulkerson");
        toolsFulkerson.setToolTipText("Ejecutar algoritmo Ford-Fulkerson");
        toolsFulkerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsFulkersonActionPerformed(evt);
            }
        });
        jMenu2.add(toolsFulkerson);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(BarraH, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tablero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(BarraH, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void opNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opNewActionPerformed
        //Eliminamos todos los elementos. (Borramos todo lo que hay en el lienzo)
        this.vtrArco.clear();
        this.vtrNode.clear();
        if (band2 == 1) {
            this.vtrAuxNode.clear();
            this.vtrAuxArco.clear();
            
            this.vtrBottleNeck.clear();
            textArea.setText("");
            btnNodo.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
            band2 = 0;
        }
        repaint();
    }//GEN-LAST:event_opNewActionPerformed

    private void opCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opCloseActionPerformed
        //Terminamos la ejecuciÃ³n del sistema.
        System.exit(0);
    }//GEN-LAST:event_opCloseActionPerformed

    private void btnRelacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelacionActionPerformed
        if (btnRelacion.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            btnNodo.setEnabled(false);
            btnMover.setEnabled(false);
            btnDelete.setEnabled(false);
            btnModificar.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            btnNodo.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
        }
    }//GEN-LAST:event_btnRelacionActionPerformed

    private void tableroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseClicked
        int x, y;
        
        if(btnNodo.isSelected()){
            //CREACION DEL NODO.
            band = 0;
            name = JOptionPane.showInputDialog(this, "Ingrese ID: ", "Nuevo Nodo", 3);//Solicitamos ID.
            
            if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
                while (band == 0 && !this.vtrNode.isEmpty()) {//Recorremos el vector por cada nuevo nombre ingresado.
                    for (Node ele : vtrNode) {//Recorremos el vector de nodos.
                        if (ele.getName().compareTo(name) != 0) {//Buscamos coincidencia
                            band = 1;
                        } 
                        else {//Coincidencia encontrada
                            JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                            name = JOptionPane.showInputDialog(tablero, "Ingrese ID: ", "Nuevo Nodo", 3);//Solicitamos ID.
                            band = 0;
                            if (name == null) {//Validamos creaciÃ³n.
                                return;
                            }
                        }
                    }
                    if (name == null) {//Validamos creaciÃ³n.
                        return;
                    }
                }
                
                if (name != null) {//ConfirmaciÃ³n de creaciÃ³n.
                    //Creamos el elemento y anexamos al vector.
                    this.vtrNode.add(new Node(evt.getPoint(), name, 0));
                    repaint();//Pintamos elemento.
                }
            }   
        }
        else if(btnRelacion.isSelected()){//Validamos botÃ³n.
            //CREACIÃN DE RELACIONES.
            band = 1;
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                for(Node ele : vtrNode){//Recorremos vector de Elementos.
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    x = ele.getPoint().x;
                    y = ele.getPoint().y;
                    
                    if(new Rectangle(x-75/2, y-75/2, 75, 75).contains(evt.getPoint())){
                        if(p1 == null){//Validamos primer click.
                            p1 = ele.getPoint();
                            conf = true;
                            cont = vtrNode.indexOf(ele);
                            nodoOrigen = ele;
                        }
                        else
                        {
                            if(conf && ele!=vtrNode.get(cont)){//Validamos tipo de elemento sobre el que se hace segundo click.
                                p2 = ele.getPoint();//Almacenamos coordenadas de segundo clickeado.
                                name = JOptionPane.showInputDialog(tablero, "Peso: ", "Nueva Arista", 3);//Solicitamos valor.
                                
                                while(band != 0 && name != null){//Validamos dato ingresado.
                                    band = 1;
                                    try {//Validamos tipo de dato ingresado.
                                        if(!(Integer.parseInt(name) > 0)){//Verificar valor dentro del rango.
                                            JOptionPane.showMessageDialog(tablero, "Peso incorrecto.", "Error", 0);//Mostrar mensaje.
                                            name = JOptionPane.showInputDialog(tablero, "Peso: ", "Nueva Arista", 3);//Solicitar valor.
                                            if (name == null){
                                                return;
                                            }
                                        }else{
                                            band = 0;
                                        }
                                    } catch (HeadlessException | NumberFormatException e) {
                                        JOptionPane.showMessageDialog(tablero, "Dato incorrecto.", "Error", 0);//Mostrar mensaje.
                                        name = JOptionPane.showInputDialog(tablero, "Peso: ", "Nueva Arista", 3);//Solicitar valor.
                                        if (name == null){
                                            return;
                                        }
                                    }
                                }
                                
                                if (name != null) {
                                    this.vtrArco.add(new Arco(p1, p2, Integer.parseInt(name), nodoOrigen, ele));//Creamos relaciÃ³n y anexamos al vector.
                                    repaint();//Pintamos.
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(tablero, "RelaciÃ³n no vÃ¡lida.", "Error", 0);//Mostamos mensaje.
                            }
                            //Reiniciamos las variables.
                            p1 = null;
                            p2 = null;
                            conf = false;
                            cont=0;
                        }
                    }
                }
            }
        }
        else if(btnDelete.isSelected()){//Validamos botÃ³n.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                for(Node ele : this.vtrNode){//Recorremos vector de Elementos.
                    x = ele.getPoint().x;
                    y = ele.getPoint().y;
                    
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    if(new Rectangle(x-75/2, y-75/2, 75, 75).contains(evt.getPoint())){
                        this.vtrNode.remove(ele);//Eliminamos elemento del vector.
                        break;
                    }
                }
                
                for (Arco arc : this.vtrArco) {//Recorremos vector de aristas.
                    int x1 = arc.getP1().x;
                    int y1 = arc.getP1().y;
                    int x2 = arc.getP2().x;
                    int y2 = arc.getP2().y;
                    
                    if (new Rectangle(x1 - 75 / 2, y1 - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrDel.add(arc);//Anexamos arista al vector.
                    } else if (new Rectangle(x2 - 75 / 2, y2 - 75 / 2, 75, 75).contains(evt.getPoint())) {//Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                        this.vtrDel.add(arc);//Anexamos arista al vector.
                    }
                }
                
                for (Arco arcos : vtrDel) {//Recorremos vector de aristas.
                    this.vtrArco.remove(arcos);//Eliminamos arista coincidentes del vector.
                }
                this.vtrDel.clear();//Eliminamos todos los elementos almacenados.
            }
            
            if (evt.getButton() == MouseEvent.BUTTON3) {
                //Seleccionar y eliminar arista
                for(Arco arc : this.vtrArco) {
                    Line2D linea = new Line2D.Double(arc.getP1(), arc.getP2());
                    
                    if(linea.intersects(evt.getX()-2, evt.getY()-2, 4, 4)) {
                        this.vtrArco.remove(arc);//Eliminamos arista coincidentes del vector.
                        break;
                    }
                }
            }
            repaint();//Pintamos
        }
        else if(btnModificar.isSelected()){//Validamos botÃ³n.
            if(evt.getButton() == MouseEvent.BUTTON1){//Validamos click.
                band = 0;
                for(Node ele : this.vtrNode){//Recorremos vector de Elementos.
                    x = ele.getPoint().x;
                    y = ele.getPoint().y;
                    
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                    if(new Rectangle(x-75/2, y-75/2, 75, 75).contains(evt.getPoint())){
                        name = JOptionPane.showInputDialog(this, "Nuevo ID: ", "Nodo", 3);//Solicitamos nuevo valor.
                        
                        if (name == null) {//Validamos nuevo valor.
                            return;
                        }
                        
                        while (band == 0 && name != null) {//Recorremos el vector por cada nuevo nombre ingresado.
                            for (Node nod : vtrNode) {//Recorremos el vector de nodos.
                                if (nod.getName().compareTo(name) != 0) {//Buscamos coincidencia
                                    band = 1;
                                } else {//Coincidencia encontrada
                                    JOptionPane.showMessageDialog(tablero, "Este ID ya ha sido utilizado.", "Error", 2);//Mostramos mensaje de coincidencia.
                                    name = JOptionPane.showInputDialog(tablero, "Nuevo ID: ", "Nodo", 3);//Solicitamos ID.
                                    band = 0;
                                    if (name == null) {//Validamos creaciÃ³n.
                                        return;
                                    }
                                }
                            }
                            if (name == null) {//Validamos creaciÃ³n.
                                return;
                            }
                        }
                        ele.setName(name);//Actualizamos valor de elemento.
                    }
                }
            }
            
            if (evt.getButton() == MouseEvent.BUTTON3) {
                band = 1;
                
                //Seleccionar y modificar  arista
                for(Arco arc : this.vtrArco) {
                    Line2D linea = new Line2D.Double(arc.getP1(), arc.getP2());
                    
                    if(linea.intersects(evt.getX()-2, evt.getY()-2, 4, 4)) {
                        name = JOptionPane.showInputDialog(this, "Nuevo peso: ", "Arista", 3);//Solicitamos nuevo valor.
                        
                        if (name == null) {//Validamos nuevo valor.
                            return;
                        }
                        
                        while (band != 0 && name != null) {//Validamos dato ingresado.
                            band = 1;
                            try {//Validamos tipo de dato ingresado.
                                if (!(Integer.parseInt(name) > 0)) {//Verificar valor dentro del rango.
                                    JOptionPane.showMessageDialog(tablero, "Peso incorrecto.", "Error", 0);//Mostrar mensaje.
                                    name = JOptionPane.showInputDialog(tablero, "Nuevo peso: ", "Arista", 3);//Solicitar valor.
                                    if (name == null) {
                                        return;
                                    }
                                } else {
                                    band = 0;
                                }
                            } catch (HeadlessException | NumberFormatException e) {
                                JOptionPane.showMessageDialog(tablero, "Dato incorrecto.", "Error", 0);//Mostrar mensaje.
                                name = JOptionPane.showInputDialog(tablero, "Nuevo peso: ", "Arista", 3);//Solicitar valor.
                                if (name == null) {
                                    return;
                                }
                            }
                        }
                        arc.setValue(Integer.parseInt(name));//Actualizamos valor de elemento.
                    }
                }
            }
            repaint();//Pintamos.
        }
    }//GEN-LAST:event_tableroMouseClicked

    private void btnMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoverActionPerformed
        if (btnMover.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            btnNodo.setEnabled(false);
            btnRelacion.setEnabled(false);
            btnDelete.setEnabled(false);
            btnModificar.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            btnNodo.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
        }
    }//GEN-LAST:event_btnMoverActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (btnDelete.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            btnNodo.setEnabled(false);
            btnMover.setEnabled(false);
            btnRelacion.setEnabled(false);
            btnModificar.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            btnNodo.setEnabled(true);
            btnMover.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnModificar.setEnabled(true);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tableroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMousePressed
        if(btnMover.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            for (Node ele : vtrNode) {//Recorremos vector de Elementos.
                int x = ele.getPoint().x;
                int y = ele.getPoint().y;
                
                //Creamos rectangulo invisible para validar que el cursor se encuentre sobre un elemento.
                if (new Rectangle(x-75/2, y-75/2, 75, 75).contains(evt.getPoint())) {
                    mov = ele;//Almacenamos elemento.
                }
            }
        }
    }//GEN-LAST:event_tableroMousePressed

    private void tableroMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseReleased
        if(btnMover.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS. Reiniciamos Variables.
            mov = null;
            cont = -1;
        }
    }//GEN-LAST:event_tableroMouseReleased

    private void tableroMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableroMouseDragged
        if(btnMover.isSelected()){//Validamos botÃ³n. TRASLACIÃN DE NODOS.
            if (mov != null) {//Validamos que se haya seleccionado un elemento.
                
                //Actualizamos el punto en el que se encuentra el nodo
                mov.setPos(evt.getPoint());
                int i = 0;
                
                for (Arco arc : vtrArco) {//Recorremos vector de Relaciones.
                    int x1 = arc.getP1().x;
                    int y1 = arc.getP1().y;
                    int x2 = arc.getP2().x;
                    int y2 = arc.getP2().y;
                    
                    //Creamos rectangulo invisible para validar que el cursor se encuentre sobre alguno de los extremos de una arista.
                    if (new Rectangle(x1 - 75 / 2, y1 - 75 / 2, 75, 75).contains(evt.getPoint())) {
                        //Actualizamos las coordenadas del nuevo extremo de las relaciones.
                        this.vtrArco.get(i).setP1(evt.getPoint());
                    } else if (new Rectangle(x2 - 75 / 2, y2 - 75 / 2, 75, 75).contains(evt.getPoint())) {
                        //Actualizamos las coordenadas del nuevo extremo de las relaciones.
                        this.vtrArco.get(i).setP2(evt.getPoint());
                    }
                    i++;
                }
                
                repaint();//Pintamos.
            }
        }
    }//GEN-LAST:event_tableroMouseDragged

    @SuppressWarnings("ConvertToTryWithResources")
    private void opSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opSaveActionPerformed
        //GUARDAR MODELO.
        JFileChooser SvdFile = new JFileChooser();//Instanciamos nueva variable.
        SvdFile.setApproveButtonText("Guardar");//Modificamos label de boton.
        SvdFile.showSaveDialog(null);//Indicamos acciÃ³n.
        File file = new File(SvdFile.getSelectedFile()+".txt");//Instanciamos nueva variable y le pasamos el archivo creado.
        
        try {//Abrimos el archivo para escribir sobre Ã©l.
            BufferedWriter Esc = new BufferedWriter(new FileWriter(file));//Instanciamos variable para manejar la informaciÃ³n ingresada.
            Esc.write("NODOS");
            Esc.write("\r\n");
            
            for (Node ele : vtrNode) {//Recorremos vector elementos y aÃ±adimos cada propiedad separada por ";".
                int x = ele.getPoint().x;
                int y = ele.getPoint().y;
                Esc.write(x + ";" + y + ";" + ele.getName() + ";" + ele.getFoS());
                Esc.write("\r\n");//Nueva linea.
            }
            
            Esc.write("RELACIONES");
            Esc.write("\r\n");
            
            for (Arco arc : vtrArco) {//Recorremos vector Relaciones y aÃ±adimos cada propiedad separada por ";".
                int x1 = arc.getP1().x;
                int y1 = arc.getP1().y;
                int x2 = arc.getP2().x;
                int y2 = arc.getP2().y;
                Esc.write(x1 + ";" + y1 + ";" + x2 + ";" + y2 + ";" + arc.getValue()
                        + ";" + this.vtrNode.indexOf(arc.getNodoOrigen()) + ";" + this.vtrNode.indexOf(arc.getNodoFinal()));
                Esc.write("\r\n");
            }
            
            Esc.close();//Cerramos archivo.
            JOptionPane.showMessageDialog(tablero, "Archivo guardado con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(tablero, "No se pudo guardar el archivo.", "Error", 0);//Mostramos mensaje.
        }
    }//GEN-LAST:event_opSaveActionPerformed

    private void opOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opOpenActionPerformed
        //ABRIR MODELO.
        band = 0;
        String [] str;
        JFileChooser OpndFile = new JFileChooser();//Instanciamos nueva variable.
        OpndFile.showOpenDialog(null);//Indicamos acciÃ³n.
        BufferedReader br;//Espacio de memoria para manejar la informaciÃ³n del archivo.
        
        try {
            br = new BufferedReader(new FileReader(OpndFile.getSelectedFile())); //Instanciamos variable para manejar la informaciÃ³n extraida.
            //Limpiamos los vectores.
            this.vtrArco.clear();
            this.vtrNode.clear();
            String line; //VARIABLE PARA MANIPULAR CADA LINEA DEL ARCHIVO
            //LEER EL ARCHIVO HASTA QUE NO HAYAN MÃS LINEAS
            br.readLine();
            
            while ((line = br.readLine()) != null) {
                //RECORTAR LA INFORMACIÃN
                str = line.split(";"); //"; discriminador"
                //MANIPULAR DATOS
                if(str[0].compareTo("RELACIONES")==0){//Verificamos secciÃ³n del archivo.
                    band = 1;
                    if ((line = br.readLine()) != null) {
                        str = line.split(";"); //"; discriminador"
                    }
                }
                
                if(band == 0){//Nodos
                    Point p = new Point(Integer.parseInt(str[0]),Integer.parseInt(str[1]));
                    this.vtrNode.add(new Node(p, str[2], Integer.parseInt(str[3])));
                }
                else{//Relaciones.
                    Point p1 = new Point(Integer.parseInt(str[0]), Integer.parseInt(str[1]));
                    Point p2 = new Point(Integer.parseInt(str[2]), Integer.parseInt(str[3]));
                    this.vtrArco.add(new Arco(p1, p2, Integer.parseInt(str[4]),
                            this.vtrNode.get(Integer.parseInt(str[5])), this.vtrNode.get(Integer.parseInt(str[6]))));
                }
            }
            br.close();//Cerramos archivo.
            repaint();//Pintamos.
            JOptionPane.showMessageDialog(this, "Archivo abierto con Ã©xito.", "Success", 1);//Mostramos mensaje.
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MiVentana.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "No se pudo abrir el archivo.", "Error", 0);//Mostramos mensaje.
        }
        
        if (band2 == 1) {
            this.vtrAuxNode.clear();
            this.vtrAuxArco.clear();
            
            this.vtrBottleNeck.clear();
            textArea.setText("");
            btnNodo.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
            band2 = 0;
        }
    }//GEN-LAST:event_opOpenActionPerformed

    private void btnNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNodoActionPerformed
        if (btnNodo.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            btnRelacion.setEnabled(false);
            btnMover.setEnabled(false);
            btnDelete.setEnabled(false);
            btnModificar.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            btnRelacion.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
        }
    }//GEN-LAST:event_btnNodoActionPerformed

    private void toolsFulkersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsFulkersonActionPerformed
        String fuente, sumidero;
        int n = 0, id1 = 0, id2 = 0, inutil;
        int tam = this.vtrNode.size();
        ArrayList<Node> aux = new ArrayList<>();
        int grafo[][] = new int[tam][tam];
        String [] str;
        this.vtrNode.forEach(nodo -> nodo.setFoS(0));
        
        fuente = JOptionPane.showInputDialog(this, "Nodo ID: ", "Fuente", 3);//Solicitamos ID.
        sumidero = JOptionPane.showInputDialog(this, "Nodo ID: ", "Sumidero", 3);//Solicitamos ID.
        
        if (fuente != null && sumidero != null) {//ConfirmaciÃ³n de creaciÃ³n.
            for (Node ele : this.vtrNode) {
                if (ele.getName().compareTo(fuente) == 0) {//Buscamos coincidencia
                    ele.setFoS(1); //Pintamos de azul la fuente
                    id1 = ele.getId();
                    n += 1;
                }
                else if (ele.getName().compareTo(sumidero) == 0) {//Coincidencia encontrada
                    ele.setFoS(1); //Pintamos de azul el sumidero
                    id2 = ele.getId();
                    n += 1;
                }
            }
        }else{
            return;
        }
        
        if (n != 2) { //Comprobamos correcta elecciÃ³n de la fuente y sumidero
            JOptionPane.showMessageDialog(tablero, "No se pudo encontrar este nodo.", "Error", 2);//Mostramos mensaje.
            return;
        }
        
        for (int j = 0; j < tam; j++) {
            this.vtrNode.get(j).setId(j);
            for (int k = 0; k < tam; k++) {
                grafo[j][k] = 0;
            }
        }
        
        for (Arco arc : this.vtrArco) {
            //CreaciÃ³n del grafo
            grafo[arc.getNodoOrigen().getId()][arc.getNodoFinal().getId()] = arc.getValue();
        }
        
        this.vtrAuxNode = (ArrayList<Node>)this.vtrNode.clone(); //Hacemos una copia del vector de nodos.
        this.vtrAuxArco = (ArrayList<Arco>)this.vtrArco.clone(); //Hacemos una copia del vector de arcos.
        this.vtrArco.clear();
        
        Ford_Fulkerson m = new Ford_Fulkerson(tam);
        this.textArea.setText("Flujo mÃ¡ximo: " + m.fordFulkerson(grafo, id1, id2, this.vtrBottleNeck));
        
        for (int i = 0; i < tam; i++) {
            inutil = 0;
            for (int j = 0; j < tam; j++) {
                if (grafo[i][j] != 0) { //Recorremos grafo resultante y pintamos relaciones correspondientes
                    this.vtrArco.add(new Arco(this.vtrNode.get(i).getPoint(), this.vtrNode.get(j).getPoint(), grafo[i][j],
                            this.vtrNode.get(i), this.vtrNode.get(j)));
                }
                else if (!(this.vtrNode.get(i).getName().compareTo(sumidero)==0)){
                    inutil += 1; //Verificar si algÃºn nodo no recibe flujo
                }
            }
            if (inutil == this.vtrNode.size()) {
                aux.add(this.vtrNode.get(i));
            }
        }
        
        this.textArea.append("\nAristas cuello de botella:");
        for (String h : this.vtrBottleNeck){
            str = h.split(";");
            this.textArea.append("\n" + this.vtrNode.get(Integer.parseInt(str[0])).getName() + " -> " + this.vtrNode.get(Integer.parseInt(str[1])).getName());
        }
        
        btnNodo.setEnabled(false);
        btnRelacion.setEnabled(false);
        btnMover.setEnabled(false);
        btnDelete.setEnabled(false);
        btnModificar.setEnabled(false);
        
        band2 = 1;
        this.vtrNode.removeAll(aux); //Eliminar nodo(s) no recibe(n) flujo
        repaint();
    }//GEN-LAST:event_toolsFulkersonActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        if (band2 == 1) {
            this.vtrNode = this.vtrAuxNode; //Hacemos una copia del vector de nodos.
            this.vtrArco = this.vtrAuxArco; //Hacemos una copia del vector de arcos.
            this.vtrNode.forEach(nodo -> nodo.setFoS(0));
            repaint();
            
            this.vtrBottleNeck.clear();
            textArea.setText("");
            btnNodo.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
            btnModificar.setEnabled(true);
            band2 = 0;
        }
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if (btnModificar.isSelected()) {//Validamos botÃ³n activado.
            //Desactivamos los demÃ¡s botones.
            btnNodo.setEnabled(false);
            btnRelacion.setEnabled(false);
            btnMover.setEnabled(false);
            btnDelete.setEnabled(false);
        } else {
            //Activamos nuevamente los botones.
            btnNodo.setEnabled(true);
            btnRelacion.setEnabled(true);
            btnMover.setEnabled(true);
            btnDelete.setEnabled(true);
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar BarraH;
    private javax.swing.JButton btnAd;
    private javax.swing.JButton btnAtras;
    private javax.swing.JToggleButton btnDelete;
    private javax.swing.JToggleButton btnModificar;
    private javax.swing.JToggleButton btnMover;
    private javax.swing.JToggleButton btnNodo;
    private javax.swing.JToggleButton btnRelacion;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JMenuItem opClose;
    private javax.swing.JMenuItem opNew;
    private javax.swing.JMenuItem opOpen;
    private javax.swing.JMenuItem opSave;
    private javax.swing.JPanel tablero;
    private java.awt.TextArea textArea;
    private javax.swing.JMenuItem toolsFulkerson;
    // End of variables declaration//GEN-END:variables
}
